<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MIT 6.s081 Lab5 COW</title>
      <link href="/2023/01/16/MIT-6-s081-Lab5-COW/"/>
      <url>/2023/01/16/MIT-6-s081-Lab5-COW/</url>
      
        <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>COW标志位，/rich.h。储存在保留位里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define COW_FLAG (1L &lt;&lt; 8)</span><br></pre></td></tr></table></figure><p>复制内存的代码，在fork中有被调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">uvmcopy_u(pagetable_t old, pagetable_t new, uint64 sz)</span><br><span class="line">&#123;</span><br><span class="line">    pte_t *pte;</span><br><span class="line">    uint64 pa, i;</span><br><span class="line">    int flags;</span><br><span class="line"></span><br><span class="line">    for(i = 0; i &lt; sz; i += PGSIZE)&#123;</span><br><span class="line">        if((pte = walk(old, i, 0)) == 0)</span><br><span class="line">            panic(&quot;uvmcopy: pte should exist&quot;);</span><br><span class="line">        if((*pte &amp; PTE_V) == 0)</span><br><span class="line">            panic(&quot;uvmcopy: page not present&quot;);</span><br><span class="line"></span><br><span class="line">        // 旧进程的物理内存</span><br><span class="line">        pa = PTE2PA(*pte);</span><br><span class="line"></span><br><span class="line">        // COW</span><br><span class="line">        *pte = (*pte &amp; ~PTE_W) | COW_FLAG;</span><br><span class="line">        flags = PTE_FLAGS(*pte);</span><br><span class="line"></span><br><span class="line">        if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0)&#123;</span><br><span class="line">            goto err;</span><br><span class="line">        &#125;</span><br><span class="line">        con[getrefindex((uint64*)pa)]++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">uvmunmap(new, 0, i / PGSIZE, 1);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理内存非法访问（页）中断的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">else if(r_scause() == 15)&#123;</span><br><span class="line">//      printf(&quot;page\n&quot;);</span><br><span class="line">        struct proc *p = myproc();</span><br><span class="line"></span><br><span class="line">        /* 【xv6对页的操控粒度为Page】</span><br><span class="line">         * 需要将当前虚拟地址所对应的page进行拷贝</span><br><span class="line">         * 由于虚拟地址可能指向页的中间</span><br><span class="line">         * 因此需要向下对其到页的边界</span><br><span class="line">         * 从而将这一页全部都进行拷贝（COW）</span><br><span class="line">         */</span><br><span class="line">        uint64 va=PGROUNDDOWN(r_stval()); // 虚拟地址</span><br><span class="line"></span><br><span class="line">        pte_t *pte; // pte</span><br><span class="line">        pte = walk(p-&gt;pagetable, va, 0);</span><br><span class="line"></span><br><span class="line">        if(*pte &amp; COW_FLAG)&#123; //是cow页面</span><br><span class="line">            uint64 pa=PTE2PA(*pte); // 物理地址</span><br><span class="line"></span><br><span class="line">            char *mem;</span><br><span class="line">            //分配一页新内存</span><br><span class="line">            if((mem = kalloc()) == 0)</span><br><span class="line">                panic(&quot;uvmtrap: pte alloc exist&quot;);</span><br><span class="line"></span><br><span class="line">            // 拷贝旧数据的值到新page</span><br><span class="line">            memmove(mem, (char*)pa, PGSIZE);</span><br><span class="line"></span><br><span class="line">            int flags = PTE_FLAGS(*pte);</span><br><span class="line"></span><br><span class="line">            flags =flags | PTE_W;</span><br><span class="line">            flags &amp;= ~COW_FLAG;</span><br><span class="line">//            *pte &amp;=~PTE_V;</span><br><span class="line">            // 进行内存映射</span><br><span class="line">            mappages(p-&gt;pagetable, va, PGSIZE, (uint64)mem, flags);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            kfree((void*)pa);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>释放内存代码（引用计数）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// derf.h</span><br><span class="line">extern int con[];</span><br><span class="line">extern int getrefindex(void*);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">kfree(void *pa)</span><br><span class="line">&#123;</span><br><span class="line">  struct run *r;</span><br><span class="line"></span><br><span class="line">  if(((uint64)pa % PGSIZE) != 0 || (char*)pa &lt; end || (uint64)pa &gt;= PHYSTOP) &#123;</span><br><span class="line">      panic(&quot;kfree&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  con[getrefindex(pa)]--;</span><br><span class="line">  //printf(&quot;%d&quot;,con[(uint64)pa/PGSIZE]);</span><br><span class="line">  if(con[getrefindex(pa)]&gt;0)&#123;</span><br><span class="line">      return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Fill with junk to catch dangling refs.</span><br><span class="line">  memset(pa, 1, PGSIZE);</span><br><span class="line"></span><br><span class="line">  r = (struct run*)pa;</span><br><span class="line"></span><br><span class="line">  acquire(&amp;kmem.lock);</span><br><span class="line">  r-&gt;next = kmem.freelist;</span><br><span class="line">  kmem.freelist = r;</span><br><span class="line">  release(&amp;kmem.lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2010.31.45.png" alt="截屏2023-01-16 10.31.45"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MITOSIS note</title>
      <link href="/2023/01/14/MITOSIS-learning/"/>
      <url>/2023/01/14/MITOSIS-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Remote-Fork-C-R"><a href="#Remote-Fork-C-R" class="headerlink" title="Remote Fork(C/R)"></a>Remote Fork(C/R)</h2><p>现有容器只能通过C/R的方法进行远程Fork。这种方法需要父进程首先需要<em>checkpoints</em> its states，并将state储存到文件里。在通过remote file copy或distributed file system将文件复制到子进程。子进程根据文件信息对夫进程进行恢复。由于C/R需要复制全部内存信息，因此很慢。例如需要对1G内存进行拷贝，C/R甚至比冷启动还要慢2.7倍。</p><h2 id="MITOSIS"><a href="#MITOSIS" class="headerlink" title="MITOSIS"></a>MITOSIS</h2><p>MITOSIS通过RDMA模拟本地Fork来实现高效的远程分叉（具有类似COW机制）。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2011.36.26.png" alt="截屏2023-01-16 11.36.26"></p><p>首先，我们将父对象的Metadata(例如页表)复制到一个压缩描述符来派生子对象。Note:不将父进程的内存页复制到描述符中。然后通过RDMA将描述符复制到子进程以恢复父进程的Metadata。子进程的“远程内存访问”会触发页面错误，内核将读区读取远程页面。避免了传输整个容器状态。同时，MITOSIS直接使用单边RDMA Read来读取远程物理内存，绕过所有软件开销。</p><h3 id="MITOSIS和C-R-fork的比较"><a href="#MITOSIS和C-R-fork的比较" class="headerlink" title="MITOSIS和C/R fork的比较"></a>MITOSIS和C/R fork的比较</h3><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-14%2013.40.51.png" alt="截屏2023-01-14 13.40.51"></p><p>MITOSIS由以下四个模块组成：</p><p>The <em>fork orchestrator</em> rehearsals the remote fork execution；准备fork和进行fork</p><p>The <em>network daemon</em> manages a scalable RDMA connection pool；RDMA连接池，守护RPC进程，维护RDMA连接</p><p>Extend OS’s <em>virtual memory subsystems</em> to utilize the remote memory with RDMA ；</p><p><em>Fallback daemon</em> provides RPC handlers to restore rare remote memory accesses that cannot utilize RDMA</p><h2 id="准备fork和进行fork"><a href="#准备fork和进行fork" class="headerlink" title="准备fork和进行fork"></a>准备fork和进行fork</h2><h3 id="1-fork-prepare"><a href="#1-fork-prepare" class="headerlink" title="1.fork_prepare"></a>1.fork_prepare</h3><p>准备fork，使用一个结构体保存：</p><ul><li>CPU寄存器状态（用于恢复运行状态）</li><li>cGroup和Namespace（用于进行容器化）</li><li>页表和虚拟内存区（用于远程内存访问）</li><li>打开文件信息（重新打开文件，使用CRIU）</li></ul><p>保存这些信息，结构体很小，大概是KB级别</p><h3 id="2-fork-resume"><a href="#2-fork-resume" class="headerlink" title="2.fork_resume"></a>2.fork_resume</h3><p>fork_resume从父进程获取descriptor，并恢复执行状态。</p><p>使用oneside RDMA获取descriptor。首先子进程通过RPC向父进程发一个authentication RPC，若认证通过，则父进程会返回descriptor’s stored address和payload。之后子进程就可以使用oneside RDMA获取descriptor。</p><p>获取到descriptor后，恢复容器状态。(1)设置cgroups和命名空间以匹配父操作系统的设置 (2)切换:用父进程的CPU寄存器、页表和I/O描述符替换调用方的CPU寄存器。此外引入SOCK以完成快速容器恢复。</p><h2 id="守护网络进程"><a href="#守护网络进程" class="headerlink" title="守护网络进程"></a>守护网络进程</h2><p>RDMA：有三种QP类型</p><p>RDMA连接消耗较大，速度较慢。因此使用无连接的oneside RDMA。因此改进RDMA连接（DCT-dynamic connected transport），DCT保留了RC的功能，并进一步提供了一种无连接的方式:单个DCQP可以与不同的节点通信。</p><p>目标节点只需要创建一个DC，该DC由节点的RDMA地址和12B DC key标识。在知道key后，子节点可以在没有连接的情况下向相应的目标发送单侧RDMA请求，硬件会承载数据处理连接，速度极快(1μs以内).</p><p>基于DCT，网络守护进程管理一个小型内核空间DCQP池，用于处理来自子进程的RDMA请求。通常，每个cpu一个DCQP就足以充分利用RDMA。但是，仅使用DCT是不够的，因为孩子需要提前知道DCT key才能与父母通信。因此，MITOSIS实现了一个内核空间”fast RPC”来引导DCT。fast是一个基于ud的RPC，支持无连接。使用RPC，我们在RPC请求中装载与父对象关联的DCT键，以查询父对象的描述符。为了节省CPU资源，我们只部署了两个内核线程来处理rpc.</p><h2 id="Virtual-memory-management"><a href="#Virtual-memory-management" class="headerlink" title="Virtual memory management"></a>Virtual memory management</h2><p>为了提高resume效率，直接将子节点映射页面的页表项(PTE)设置为父节点的物理地址(PA)。使用一个PTE中的remote bit来进行区分（remote bit位于PTE未被利用的高位）。在resume过程中，系统会设置remote bit并清除present bit，当子进程访问里该PTE，就会进入缺页中断，从而出发RDMA远程读取。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2013.18.22.png" alt="截屏2023-01-16 13.18.22"></p><p>如果错误页没有映射到父页，例如堆栈增长，我们就像处理普通的页错误一样在本地处理它。<br>否则，检查故障虚拟地址VA (virtual address)是否映射了远端PA。使用单边RDMA将远程page读到本地页。大多数子页面都可以通过RDMA恢复。在错过映射的情况下，则使用RPC映射。</p><p>RPC：每个节点有一个回退守护进程，该守护进程生成内核线程来处理子节点的页请求（包含父节点标识符和请求的虚拟地址）。回退逻辑: 在检查请求的有效性之后，守护进程线程将代表父进程加载页面。如果加载成功，我们将把结果发回给子进程。</p><p><strong>Access control and isolation</strong></p><p>我们需要拒绝对不再属于父节点的映射页的访问，并正确隔离对不同容器的访问。</p><p>直接暴露父节点的物理内存可以提高远程fork的速度。然而，我们需要拒绝对不再属于父节点的映射页的访问，并正确隔离对不同容器的访问。由于我们以cpu旁路的方式通过单边RDMA公开内存，因此只能利用RNIC进行控制。</p><p>MITOSIS用一种基于连接的内存访问控制方法。将不同的RDMA连接分配到父虚拟内存区域(VMA)的不同部分，例如，每个VMA一个连接。如果映射的物理页不再属于父页，我们将破坏与该页的VMA相关的连接。因此，child对页面的访问将被RNIC拒绝。所有连接都在内核中进行管理，以防止恶意用户访问错误的远程容器内存。</p><p>为了实现基于连接的访问控制，每个连接在创建和存储时都必须高效。幸运的是，DCQP很好地满足了这些要求。在子端，每个连接(DC key)只消耗12B ，不同的DC连接可以共享相同的DCQP。parent-side DC target consumes 144B。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-16%2013.34.56.png" alt="截屏2023-01-16 13.34.56"></p><p>图片表示了基于dct的访问控制。在准备分叉时，MITOSIS从目标池中选择一个DC目标分配给每个parent VMA。pool在启动时初始化，并在后台定期填充。这些目标的DC key被装载在父进程的描述符中，以便子进程在恢复过程中可以将它们记录在VMA中。在读取父节点的page时，子节点将使用与页面VMA对应的key来发出RDMA请求。使用此方案，如果parent想要拒绝对该页的访问，它可以销毁相应的DC目标。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab4 Trap</title>
      <link href="/2023/01/13/MIT-6-s081-Lab4/"/>
      <url>/2023/01/13/MIT-6-s081-Lab4/</url>
      
        <content type="html"><![CDATA[<h2 id="RISC-V-assembly"><a href="#RISC-V-assembly" class="headerlink" title="RISC-V assembly"></a>RISC-V assembly</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int g(int x) &#123;</span><br><span class="line">  return x+3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int f(int x) &#123;</span><br><span class="line">  return g(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main(void) &#123;</span><br><span class="line">  printf(&quot;%d %d\n&quot;, f(8)+1, 13);</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;g&gt;:</span><br><span class="line">#include &quot;kernel/param.h&quot;</span><br><span class="line">#include &quot;kernel/types.h&quot;</span><br><span class="line">#include &quot;kernel/stat.h&quot;</span><br><span class="line">#include &quot;user/user.h&quot;</span><br><span class="line"></span><br><span class="line">int g(int x) &#123;</span><br><span class="line">   0:1141                addisp,sp,-16</span><br><span class="line">   2:e422                sds0,8(sp)</span><br><span class="line">   4:0800                addis0,sp,16</span><br><span class="line">  return x+3;</span><br><span class="line">&#125;</span><br><span class="line">   6:250d                addiwa0,a0,3</span><br><span class="line">   8:6422                lds0,8(sp)</span><br><span class="line">   a:0141                addisp,sp,16</span><br><span class="line">   c:8082                ret</span><br><span class="line"></span><br><span class="line">000000000000000e &lt;f&gt;:</span><br><span class="line"></span><br><span class="line">int f(int x) &#123;</span><br><span class="line">   e:1141                addisp,sp,-16</span><br><span class="line">  10:e422                sds0,8(sp)</span><br><span class="line">  12:0800                addis0,sp,16</span><br><span class="line">  return g(x);</span><br><span class="line">&#125;</span><br><span class="line">  14:250d                addiwa0,a0,3</span><br><span class="line">  16:6422                lds0,8(sp)</span><br><span class="line">  18:0141                addisp,sp,16</span><br><span class="line">  1a:8082                ret</span><br><span class="line"></span><br><span class="line">000000000000001c &lt;main&gt;:</span><br><span class="line"></span><br><span class="line">void main(void) &#123;</span><br><span class="line">  1c:1141                addisp,sp,-16</span><br><span class="line">  1e:e406                sdra,8(sp)</span><br><span class="line">  20:e022                sds0,0(sp)</span><br><span class="line">  22:0800                addis0,sp,16</span><br><span class="line">  printf(&quot;%d %d\n&quot;, f(8)+1, 13);</span><br><span class="line">  24:4635                lia2,13</span><br><span class="line">  26:45b1                lia1,12</span><br><span class="line">  28:00000517          auipca0,0x0</span><br><span class="line">  2c:7a850513          addia0,a0,1960 # 7d0 &lt;malloc+0xe8&gt;</span><br><span class="line">  30:00000097          auipcra,0x0</span><br><span class="line">  34:600080e7          jalr1536(ra) # 630 &lt;printf&gt;</span><br><span class="line">  exit(0);</span><br><span class="line">  38:4501                lia0,0</span><br><span class="line">  3a:00000097          auipcra,0x0</span><br><span class="line">  3e:28e080e7          jalr654(ra) # 2c8 &lt;exit&gt;</span><br><span class="line"></span><br><span class="line">0000000000000042 &lt;_main&gt;:</span><br><span class="line">//</span><br><span class="line">// wrapper so that it&#x27;s OK if main() does not call exit().</span><br><span class="line">//</span><br><span class="line">void</span><br><span class="line">_main()</span><br><span class="line">&#123;</span><br><span class="line">  42:1141                addisp,sp,-16</span><br><span class="line">  44:e406                sdra,8(sp)</span><br><span class="line">  46:e022                sds0,0(sp)</span><br><span class="line">  48:0800                addis0,sp,16</span><br><span class="line">  extern int main();</span><br><span class="line">  main();</span><br><span class="line">  4a:00000097          auipcra,0x0</span><br><span class="line">  4e:fd2080e7          jalr-46(ra) # 1c &lt;main&gt;</span><br><span class="line">  exit(0);</span><br><span class="line">  52:4501                lia0,0</span><br><span class="line">  54:00000097          auipcra,0x0</span><br><span class="line">  58:274080e7          jalr628(ra) # 2c8 &lt;exit&gt;</span><br><span class="line"></span><br><span class="line">000000000000005c &lt;strcpy&gt;:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RISC-V-trap-machinery"><a href="#RISC-V-trap-machinery" class="headerlink" title="RISC-V trap machinery"></a>RISC-V trap machinery</h2><ul><li>stvec ：内核在这里写入它的trap处理程序的地址;RISC-V跳转到stvec中的地址来处理trap。</li><li>sepc：当一个trap发生时，RISC-V将程序计数器保存在这里(因为pc会被stvec中的值覆盖)。sret (return from trap)指令将sepc复制到pc上。内核可以编写sepc来控制sret的位置。</li><li>scause：RISC-V在这里放了一个数字来描述trap的原因。</li><li>sscratch： trap处理程序代码使用sscratch来避免在 保存用户寄存器之前覆盖用户寄存器。</li><li>sstatus：sstatus中的SIE位控制是否启用设备中断。如果内核清除了SIE, RISC-V将延迟设备中断，直到内核设置了SIE。SPP位表示trap来自用户模式还是管理模式，并控制sret返回哪种模式。</li></ul><p>RISC-V中断发生过程：</p><ol><li>如果设备中断，且sstatus SIE位为清零，则无需执行以下操作</li><li>通过清除sstatus中的SIE位来禁用中断。</li><li>Copy the pc to sepc.</li><li>将当前模式(user或supervisor)保存在sstatus的SPP位中。</li><li>设置原因以反映陷阱的原因。</li><li>Set the mode to supervisor</li><li>Copy stvec to the pc.</li><li>在新的pc位置开始执行</li></ol><h2 id="User-Trap"><a href="#User-Trap" class="headerlink" title="User Trap"></a>User Trap</h2><p>用户中断当用户调用了ecall指令时发生（或发生了非法操作或硬件中断）。</p><p>用户发生中断：<br>step1: uservec<br>step2: usertrap</p><p>当中断返回：<br>step1: usertrapret<br>step2: userret</p><h3 id="1-发生中断"><a href="#1-发生中断" class="headerlink" title="1. 发生中断"></a>1. 发生中断</h3><p>TRAMPOLINE page在程序初始化时放置，位于user虚拟地址的顶部，同时TRAMPOLINE在内核页表也被映射。且没有 PTE_U标志。因此trap handler在切换到内核page后可以继续执行。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-13%2023.20.51.png" alt="截屏2023-01-13 23.20.51"></p><p>为了保存用户状态，uservec会将用户寄存器状态保存在TRAPFRAME（一个结构体）。TRAPFRAME 在 TRAMPOLINE之下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct trapframe &#123;</span><br><span class="line">  /*   0 */ uint64 kernel_satp;   // kernel page table</span><br><span class="line">  /*   8 */ uint64 kernel_sp;     // top of process&#x27;s kernel stack</span><br><span class="line">  /*  16 */ uint64 kernel_trap;   // usertrap()</span><br><span class="line">  /*  24 */ uint64 epc;           // saved user program counter</span><br><span class="line">  /*  32 */ uint64 kernel_hartid; // saved kernel tp</span><br><span class="line">  /*  40 */ uint64 ra;</span><br><span class="line">  /*  48 */ uint64 sp;</span><br><span class="line">  /*  56 */ uint64 gp;</span><br><span class="line">  /*  64 */ uint64 tp;</span><br><span class="line">  /*  72 */ uint64 t0;</span><br><span class="line">  /*  80 */ uint64 t1;</span><br><span class="line">  ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TRAPFRAME中保存了内核page的信息和cpu信息，uservec从这里获取信息。然后执行usertrap。</p><p> usertrap的工作是确定trap的原因, 运行trap并返回。usertrap首先会保存sepc（用户程序计数器）。如果该trap是一个系统调用，则usertrap调用sycall来处理它;如果设备中断，devintr;否则它是一个异常，内核会终止发生故障的进程。</p><p>系统调用路径在保存的用户程序计数器上增加了4，因为RISC-V在系统调用的情况下，用户代码需要在后续指令处恢复执行（不能反复执行sys call）。在退出过程中，usertrap检查进程是否已经被杀死或应该产生CPU(如果这个trap是一个定时器中断)。</p><h3 id="2-中断返回"><a href="#2-中断返回" class="headerlink" title="2. 中断返回"></a>2. 中断返回</h3><p>返回第一步是运行usertrapret。然后执行userret。这俩恢复了一些寄存器状态，返回用户空间。</p><h2 id="initcode-S（如何调用sys-call）"><a href="#initcode-S（如何调用sys-call）" class="headerlink" title="initcode.S（如何调用sys call）"></a>initcode.S（如何调用sys call）</h2><p>initcode.S将exec的参数放在寄存器a0和a1中，并将系统调用号放在a7中。系统调用号匹配syscalls数组中的条目，syscalls数组是一个函数指针(kernel/syscall.c:107)。调用指令被捕获到内核中，并导致uservec、usertrap和sycall执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">la a0, init</span><br><span class="line">la a1, argv</span><br><span class="line">li a7, SYS_exec</span><br><span class="line">ecall</span><br></pre></td></tr></table></figure><p>Syscall (kernel/ Syscall .c:132) 从trapframe中保存的a7中获取系统调用号，并使用它索引到系统调用中。对于第一个系统调用，a7包含SYS_exec (ker- nel/ sycall .h:8)，导致调用系统调用实现函数SYS_exec。</p><p>当sys_exec返回时，系统调用将返回值记录在p-&gt;trapframe-&gt;a0中。这将导致对exec()的原始用户空间调用返回该值，因为RISC-V上的Ccall约定将返回值放在a0中。</p><p>系统调用通常返回负数表示错误，返回零或正数表示成功。如果系统调用号无效，系统调用将打印错误并返回−1。</p><h2 id><a href="#" class="headerlink" title></a></h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-15%2000.09.58.png" alt="截屏2023-01-15 00.09.58"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab3 Page Table</title>
      <link href="/2023/01/11/MIT6-s081-Lab3-Page-Table/"/>
      <url>/2023/01/11/MIT6-s081-Lab3-Page-Table/</url>
      
        <content type="html"><![CDATA[<h2 id="页表结构推导"><a href="#页表结构推导" class="headerlink" title="页表结构推导"></a>页表结构推导</h2><p>RICS-V架构，2^39bit内存可用，2^37Byte。每页是4096Byte，2^12 Byte</p><p>逻辑上，页表需要2^27个pte，以映射全部物理地址(pte是页表中对以应一个物理内存地址的信息存储单元)。</p><p>每个pte包含64bit（44bit PNN，一些Flag）。以下为pte结构：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-11%2013.57.28.png" alt="截屏2023-01-11 13.57.28"></p><p>但是，2^27个pte需要内存：2^27 * 2^6 bit = 2^29 bit = 2^27byte = 2^10 * 2^10 * 2^9 byte = 512MB。若存储全部进程的pte则需要占用大量内存。因此使用三级页表结构：</p><p>一个页表页，包含512个pte。512^3=(2^9)^3，因此理论上可以使用三级页表表示全部的物理地址。当一块虚拟地址没有被使用，则相应的页表不会被初始化，则不需要使用内存。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-11%2013.30.54.png" alt="截屏2023-01-11 13.30.54"></p><p>根据虚拟地址，获取相应pte (若该虚拟地址未被初始化，则进行相应的页表初始化)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// pagetable 根页表</span><br><span class="line">// va 虚拟地址</span><br><span class="line">// alloc是否初始化</span><br><span class="line">pte_t* walk(pagetable_t pagetable, uint64 va, int alloc)&#123;</span><br><span class="line">  if(va &gt;= MAXVA)</span><br><span class="line">    panic(&quot;walk&quot;);</span><br><span class="line"></span><br><span class="line">// 三级页表</span><br><span class="line">  for(int level = 2; level &gt; 0; level--) &#123;</span><br><span class="line">    pte_t *pte = &amp;pagetable[PX(level, va)];</span><br><span class="line">    if(*pte &amp; PTE_V) &#123; //已经分配</span><br><span class="line">      pagetable = (pagetable_t)PTE2PA(*pte); //跳转到下一级页表</span><br><span class="line">    &#125; else &#123; // 为分配此级页表</span><br><span class="line">      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0) //分配一页，并跳转到下一级页表</span><br><span class="line">        return 0;</span><br><span class="line">      memset(pagetable, 0, PGSIZE); //初始化页</span><br><span class="line">      *pte = PA2PTE(pagetable) | PTE_V; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return &amp;pagetable[PX(0, va)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核地址空间"><a href="#内核地址空间" class="headerlink" title="内核地址空间"></a>内核地址空间</h2><h2 id="进程地址空间"><a href="#进程地址空间" class="headerlink" title="进程地址空间"></a>进程地址空间</h2><h2 id="Lab结果"><a href="#Lab结果" class="headerlink" title="Lab结果"></a>Lab结果</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-13%2015.03.29.png" alt="截屏2023-01-13 15.03.29"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT 6.s081 Lab2 System Call</title>
      <link href="/2023/01/10/6-s081-Lab2-System-Call/"/>
      <url>/2023/01/10/6-s081-Lab2-System-Call/</url>
      
        <content type="html"><![CDATA[<h2 id="xv6系统用户态调用syscall过程分析"><a href="#xv6系统用户态调用syscall过程分析" class="headerlink" title="xv6系统用户态调用syscall过程分析"></a>xv6系统用户态调用syscall过程分析</h2><ul><li>/user/usys.S 是用户态进入内核态的汇编脚本，该文件由usys.pl生成</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.global sysinfo</span><br><span class="line">sysinfo:</span><br><span class="line"> li a7, SYS_sysinfo  # 将syscall的标识写入a7寄存器</span><br><span class="line"> ecall               # 使用ecall指令，使用a7寄存器，进入内核态</span><br><span class="line"> ret</span><br></pre></td></tr></table></figure><ul><li>/kernal/syscall.c，该函数获取用户态传递的syscall id，并进行调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void syscall(void) &#123;</span><br><span class="line">  int num;</span><br><span class="line">  struct proc *p = myproc(); //获取进入内核态的进程</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7;    //获取需要执行的系统调用id，该id由usys.S写入了a7寄存器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  if(num &gt; 0 &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123; # 使用syscall的函数指针调用</span><br><span class="line">  </span><br><span class="line">    // Use num to lookup the system call function for num, call it,</span><br><span class="line">    // and store its return value in p-&gt;trapframe-&gt;a0</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num](); #将syscall返回值保存在a0寄存器，通过此方法将返回值传递给用户态</span><br><span class="line">    </span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    printf(&quot;%d %s: unknown sys call %d\n&quot;,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/kernal/sysproc.c，该文件是lab2中syscall的实现代码文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//实现syscall,该函数需在syscall.c中声明</span><br><span class="line">uint64 sys_trace(void)&#123;</span><br><span class="line"></span><br><span class="line">// 获取system call 参数</span><br><span class="line">    int muskid;</span><br><span class="line">    argint(0,&amp;muskid);</span><br><span class="line"></span><br><span class="line">    return trace(muskid); //do something and return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加syscall流程"><a href="#添加syscall流程" class="headerlink" title="添加syscall流程"></a>添加syscall流程</h2><ol><li><p>在syscall.h中添加一个syscall id</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define SYS_trace  22</span><br><span class="line">#define SYS_sysinfo  23</span><br></pre></td></tr></table></figure></li><li><p>在syscall.c中添加syscall的函数定义</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extern uint64 sys_trace(void);</span><br><span class="line">extern uint64 sys_sysinfo(void);</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[SYS_trace]   sys_trace,</span><br><span class="line">[SYS_sysinfo]   sys_sysinfo</span><br></pre></td></tr></table></figure></li><li><p>在sysproc中实现syscall函数</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uint64 sys_trace(void)&#123;</span><br><span class="line">    int muskid;</span><br><span class="line"></span><br><span class="line">    // 获取system call 参数</span><br><span class="line">    argint(0,&amp;muskid);</span><br><span class="line"></span><br><span class="line">    return trace(muskid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在/user/usys.pl加入系统调用声明</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry(&quot;trace&quot;);</span><br><span class="line">entry(&quot;sysinfo&quot;);</span><br></pre></td></tr></table></figure></li></ol><p>这样以来，用户态向内核态传递syscall id(a7)，内核态根据id对相应的syscall进行调用，并将返回值储存在a0寄存器。</p><h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><h2 id="Sysinfo"><a href="#Sysinfo" class="headerlink" title="Sysinfo"></a>Sysinfo</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2023-01-10%2002.03.22.png" alt="截屏2023-01-10 02.03.22"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Log framework High level design</title>
      <link href="/2022/12/06/Log-fremawork-High-level-design/"/>
      <url>/2022/12/06/Log-fremawork-High-level-design/</url>
      
        <content type="html"><![CDATA[<p>为了提升go语言的熟练程度，使用go语言编写一个easy log framework. This is the high level design for this framework.</p><h2 id="Requirement-Analysis"><a href="#Requirement-Analysis" class="headerlink" title="Requirement Analysis"></a>Requirement Analysis</h2><h3 id="1-Log-levels"><a href="#1-Log-levels" class="headerlink" title="1. Log levels"></a>1. Log levels</h3><p>​    ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE</p><h3 id="2-Basic-requirement"><a href="#2-Basic-requirement" class="headerlink" title="2. Basic requirement"></a>2. Basic requirement</h3><p>用户需要在每个需要使用日志的类中声明一个EasyLog对象。利用工厂模式声明，工厂方法可选一下几种参数：</p><ul><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross-domain security in SSO</title>
      <link href="/2022/12/01/Cross-domain-security-in-SSO/"/>
      <url>/2022/12/01/Cross-domain-security-in-SSO/</url>
      
        <content type="html"><![CDATA[<p>由于Casdoor Flutter Sdk遇到了跨域问题，故调研Okta和Auth0的跨域问题的解决方案，方案初步整理如下：</p><h2 id="解决策略"><a href="#解决策略" class="headerlink" title="解决策略"></a>解决策略</h2><p>在单点登录系统中，Single-Page App需要从浏览器跨域访问SSO服务器。为支持这一需求，单点登录系统应支持配置“Allowed Web Origins”和“Allowed API”。SSO服务可以根据这两个配置对跨域请求进行校验。</p><blockquote><p>定义：</p><ul><li><p><strong>Single-Page App</strong>：单页应用。为不包含后端的纯web页面</p></li><li><p><strong>Allowed Web Origins</strong>：允许跨域访问的网络源(Web Origin)。尽管Single-Page App不包含后端，但其依然会挂在一个服务器上以支持用户访问，这个服务器的Host就是Web Origin</p></li><li><p> <strong>Allowed API</strong>：支持跨域访问的API</p></li></ul></blockquote><p>以下为Okta和Auth0对两种配置的支持情况：</p><table><thead><tr><th align="center"></th><th align="center">Okta</th><th align="center">Auth0</th></tr></thead><tbody><tr><td align="center">Allowed Web Origins</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">Allowed API</td><td align="center">✅</td><td align="center">⭕️</td></tr></tbody></table><p>对于Js sdk，需对跨域访问的请求头进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">referrer : Web Origin/path</span><br><span class="line">origin : Web Origin</span><br></pre></td></tr></table></figure><p>此外，需针对Token的存储模式提供安全保障，例如localstorage和设定过期策略。<br>（Okta和Auth0的整个跨域支持逻辑比较复杂，暂未弄清整个流程全部细节）</p><h2 id="Okta对跨域问题的支持"><a href="#Okta对跨域问题的支持" class="headerlink" title="Okta对跨域问题的支持"></a>Okta对跨域问题的支持</h2><p>Okta跨域配置教程：<a href="https://developer.okta.com/docs/guides/enable-cors/main/">https://developer.okta.com/docs/guides/enable-cors/main/</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-12-01%2019.50.59.png" alt="截屏2022-12-01 19.50.59"></p><p>Okta js sdk repo：<a href="https://github.com/okta/okta-auth-js">https://github.com/okta/okta-auth-js</a><br>Okta js sdk教程：<a href="https://developer.okta.com/docs/guides/auth-js/main/">https://developer.okta.com/docs/guides/auth-js/main/</a></p><h2 id="Auth0对跨域问题的支持"><a href="#Auth0对跨域问题的支持" class="headerlink" title="Auth0对跨域问题的支持"></a>Auth0对跨域问题的支持</h2><p>Auth0 js sdk教程：<a href="https://auth0.com/docs/quickstart/spa/vanillajs/interactive">https://auth0.com/docs/quickstart/spa/vanillajs/interactive</a></p><p><img src="https://github.com/muchengl/pic_storage/blob/main/uPic/%E6%88%AA%E5%B1%8F2022-12-01%2019.48.51.png?raw=true" alt="截屏2022-12-01 19.48.51"></p><p>Auth0 js sdk: <a href="https://github.com/auth0/auth0.js/blob/master/src/web-auth/cross-origin-authentication.js">https://github.com/auth0/auth0.js/blob/master/src/web-auth/cross-origin-authentication.js</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Study Notes about Virtualization 01</title>
      <link href="/2022/11/29/Study-Notes-about-Virtualization-01/"/>
      <url>/2022/11/29/Study-Notes-about-Virtualization-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-runtime-environment"><a href="#Docker-runtime-environment" class="headerlink" title="Docker runtime environment"></a>Docker runtime environment</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/img_3faaf387af747fdecd5530e05bfceeb0.jpg" alt="img_3faaf387af747fdecd5530e05bfceeb0"></p><p>Docker初始发展高度封闭，后期转向开放路线。此时Docker的运行依赖为Runc。Runc是一个实现了OCI（<a href="https://www.opencontainers.org/">Open Container Initiative</a>）协议的组件。因此可以通过支持OCI协议，实现对Runc的替换，从而实现自己的Docker运行时依赖。</p><p>Userful Link：<br>Blog：<a href="https://xuanwo.io/2019/08/06/oci-intro/">https://xuanwo.io/2019/08/06/oci-intro/</a><br>OCI Repo：<a href="https://github.com/opencontainers/runtime-spec">https://github.com/opencontainers/runtime-spec</a></p><h2 id="gVisor"><a href="#gVisor" class="headerlink" title="gVisor"></a>gVisor</h2><p><a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/kubernetes/virtual/gvisor/gvisor_quickstart.html%EF%BC%89">gVisor</a>是一个谷歌的开源项目。实现了OCI协议，因此可以作为Docker的runtime。Docker存在安全问题，程序有可能逃逸出Container，从而威胁操作系统本身运行。因此需要一款更加安全的Runtime application。gVisor就是这样的一款app。</p><p>gVisor是一个sandbox，实现了一个“应用内核”——Sentry。原理是劫持了应用程序的全部sys call，利用Ptrace(or KVM)。Sentry劫持到sys call后，使用go语言模拟出了sys call的功能，从而实现了一个虚拟内核。隔离了程序和Host Kernel。</p><p>同时gVisor有一个Gofer模块，用于处理应用程序的IO。</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/665372-20210108180022427-177964885.png" alt="665372-20210108180022427-177964885"></p><h2 id="Learning-Plan"><a href="#Learning-Plan" class="headerlink" title="Learning Plan"></a>Learning Plan</h2><ul><li>Step1: 学完go</li><li>Step2: 看<a href="https://github.com/opencontainers/runc">Runc</a>的代码，研究OCI怎么实现的</li><li>Step3: 看<a href="https://cloud-atlas.readthedocs.io/zh_CN/latest/kubernetes/virtual/gvisor/gvisor_quickstart.html">gVisor</a>的代码，研究实现细节</li><li>Step4: 实现一个自己的Docker runtime，这个Runtime应该具有以下特点：<ul><li>使用go实现</li><li>简单轻量，但具有完备的功能，可以完美的作为一个OJ系统的Sandbox</li><li>利用Ptrace实现</li><li>支持使用json自定义sys call的调用规则（Allow List），以及进行内存时间限制，<del>并实现一套简易的对外交互接口(<a href="https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.proto">CRI</a>)</del></li><li>支持OCI，可以作为Docker的runtime，支持K8S分发部署user code，从而可以作为OJ系统的评测集群Worker，</li><li>严格保证高代码质量，保证高可读性，可维护性</li></ul></li></ul><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Casdoor Flutter Sdk Bug Fix</title>
      <link href="/2022/11/27/Casdoor-Flutter-Sdk-Bug-Fix/"/>
      <url>/2022/11/27/Casdoor-Flutter-Sdk-Bug-Fix/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安卓，不能跳转回app问题"><a href="#1-安卓，不能跳转回app问题" class="headerlink" title="1.安卓，不能跳转回app问题"></a>1.安卓，不能跳转回app问题</h2><p>安装了一个第三方浏览器，就解决问题了，因此sdk的代码本身应该是是正确的（原始浏览器不能跳转的问题暂不清楚原因，还需研究）  </p><h2 id="2-Flutter-web端存在跨域问题"><a href="#2-Flutter-web端存在跨域问题" class="headerlink" title="2.Flutter web端存在跨域问题"></a>2.Flutter web端存在跨域问题</h2><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/5DC1E696AFA5781CE5B8C30C59AEFA8F.jpg" alt="5DC1E696AFA5781CE5B8C30C59AEFA8F"></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/D306359D80BF70C7E5350EE14321E2DF.jpg" alt="D306359D80BF70C7E5350EE14321E2DF"></p><p>这个问题网上有很多讨论，单从Flutter的角度来说，好像没有完美解决方案。 </p><blockquote><p>这一块我不清楚我理解的对不对：</p><p>我研究了一下Casdoor js sdk的逻辑，使用了js sdk的项目里，我没有找到浏览器直接向Casdoor发送请求获取token的例子。 </p><p>1.casdoor-python-vue-sdk-example这个repo，token是通过后端的py程序获取的，应该不是浏览器直接向casdoor发请求。</p><p>2.casdoor-raw-js-example这个repo，是用node.js启动项目（并且启动了一个代理server，由这个server向Casdoor发送请求），也不是原生js在浏览器直接请求token。</p></blockquote><p>但是Flutter-web就等于是编译出来一个静态web项目，原生运行在浏览器，浏览器中的原生js直接去请求其他域名下的casdoor必然遇到跨域问题</p><p>为解决这个问题，我目前想到了四种方法：</p><ul><li>为Casdoor的token获取接口添加CORS跨域资源分享支持</li><li>用Flutter调用原生js代码，通过一些不太优美的原生js方式绕过跨域问题</li><li>在Flutter内置一个代理程序（类似casdoor-raw-js-example）.但是这样没有实际意义，因为这个代理必须在Dart环境下才能启动，对于用户而言没用。</li><li>调整Flutter web的逻辑，不再提供其直接获取token的功能。或告知用户，直接用Flutter web整合Casdoor会遇到跨域问题，建议结合后端使用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree Generator (随机生成一颗树)</title>
      <link href="/2022/11/23/Tree/"/>
      <url>/2022/11/23/Tree/</url>
      
        <content type="html"><![CDATA[<p>This is a very interesting program which can generate parenthesis expressions of a tree at random and draw it.</p><p>Link: <a href="https://muchengl.github.io/tree/">https://muchengl.github.io/tree/</a></p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-23%2014.06.22.png" alt="截屏2022-11-23 14.06.22"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Casdoor Flutter Sdk Test</title>
      <link href="/2022/11/22/Casdoor-Flutter-sdk-Test/"/>
      <url>/2022/11/22/Casdoor-Flutter-sdk-Test/</url>
      
        <content type="html"><![CDATA[<h2 id="Step-1-Clone-casdoor-flutter-example-from-Github"><a href="#Step-1-Clone-casdoor-flutter-example-from-Github" class="headerlink" title="Step 1: Clone casdoor-flutter-example from Github"></a>Step 1: Clone casdoor-flutter-example from Github</h2><p>Link: <a href="https://github.com/casdoor/casdoor-flutter-example">https://github.com/casdoor/casdoor-flutter-example</a></p><h2 id="Step-2-Test-in-Chrome-Web"><a href="#Step-2-Test-in-Chrome-Web" class="headerlink" title="Step 2: Test in Chrome(Web)"></a>Step 2: Test in Chrome(Web)</h2><p>Encountered a cross-domain problem. So the token could not be obtained.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cross-domain code</span></span><br><span class="line"><span class="comment">// Post: localhost -&gt; door.casdoor.com</span></span><br><span class="line"><span class="keyword">final</span> response = <span class="keyword">await</span> _casdoor.requestOauthAccessToken(code);</span><br></pre></td></tr></table></figure><p>Error:</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2014.12.45.png" alt="截屏2022-11-26 14.12.45"></p><h2 id="Step-3-Test-in-Android-Emulator"><a href="#Step-3-Test-in-Android-Emulator" class="headerlink" title="Step 3: Test in Android Emulator"></a>Step 3: Test in Android Emulator</h2><p>Android app can get a Token. But the automatic jump from browser back to App cannot be triggered. (Perhaps the emulator causes this bug)</p><p>Graphic：</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2014.41.25.png" alt="截屏2022-11-26 14.41.25"></p><h2 id="Step-4-Test-in-IOS-Emulator"><a href="#Step-4-Test-in-IOS-Emulator" class="headerlink" title="Step 4: Test in IOS Emulator"></a>Step 4: Test in IOS Emulator</h2><p>Working well.</p><p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/%E6%88%AA%E5%B1%8F2022-11-26%2015.38.58.png" alt="截屏2022-11-26 15.38.58"></p>]]></content>
      
      
      
        <tags>
            
            <tag> casdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon internship Doc</title>
      <link href="/2022/11/19/Amazon-Doc/"/>
      <url>/2022/11/19/Amazon-Doc/</url>
      
        <content type="html"><![CDATA[<object data="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf" type="application/pdf" width="700px" height="800px">    <embed src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf">        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/File-analysis-tool-high-level-design.pdf">Download PDF</a>.</p>    </object>]]></content>
      
      
      
        <tags>
            
            <tag> intern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS Learning 01</title>
      <link href="/2022/11/13/OS%20Learning%2001/"/>
      <url>/2022/11/13/OS%20Learning%2001/</url>
      
        <content type="html"><![CDATA[<h1 id="C-basic-knowledge"><a href="#C-basic-knowledge" class="headerlink" title="C basic knowledge"></a>C basic knowledge</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spin()</span><br></pre></td></tr></table></figure><p>等一秒钟返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert( 表达式 );</span><br></pre></td></tr></table></figure><p>若表达式值为0，则终止程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">malloc</span>(num);</span><br><span class="line"><span class="type">int</span> *p=<span class="built_in">malloc</span>(num);</span><br></pre></td></tr></table></figure><p>动态分配内存函数，分配长度为num字节的内存块，需要使用free释放。</p><p>p是一个指针变量，表示内存中的一个地址。*p表示这个地址内存中存的值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Operation Systems Three Easy Pieces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-blog Test</title>
      <link href="/2022/11/13/my-first-blog/"/>
      <url>/2022/11/13/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/muchengl/pic_storage/main/uPic/1.jpeg" alt="1"></p><h1 id="Spring学习笔记（1）"><a href="#Spring学习笔记（1）" class="headerlink" title="Spring学习笔记（1）"></a>Spring学习笔记（1）</h1><h3 id="1-依赖注入，控制反转的理解"><a href="#1-依赖注入，控制反转的理解" class="headerlink" title="1.依赖注入，控制反转的理解"></a>1.依赖注入，控制反转的理解</h3><h3 id="2-Spring程序结构"><a href="#2-Spring程序结构" class="headerlink" title="2.Spring程序结构"></a>2.Spring程序结构</h3><ul><li>实体类（pojo）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Hello hello=(Hello)context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-set注入方法（di）"><a href="#3-set注入方法（di）" class="headerlink" title="3.set注入方法（di）"></a>3.set注入方法（di）</h3></li><li>实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Students</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] book;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.pojo.Students&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刘瀚中&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        bean注入，使用ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>傲慢与偏见<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>呼啸山庄<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>瓦尔登湖<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              列表注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>傲慢与偏见<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>呼啸山庄<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>瓦尔登湖<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;饭卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;工资卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--              集合注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>吃鸡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span>administrator@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;support&quot;</span>&gt;</span>support@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;development&quot;</span>&gt;</span>development@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-自动装配（autowiring）"><a href="#4-自动装配（autowiring）" class="headerlink" title="4.自动装配（autowiring）"></a>4.自动装配（autowiring）</h3>自动装配首先会根据name寻找对象，<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;dog1&quot;)</span><span class="comment">//若dog对象不唯一，需设置类名</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;cat&quot;</span> class=<span class="string">&quot;com.liu.pojo.Cat&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog1&quot;</span> class=<span class="string">&quot;com.liu.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog2&quot;</span> class=<span class="string">&quot;com.liu.pojo.Dog&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;people&quot;</span> class=<span class="string">&quot;com.liu.pojo.People&quot;</span> autowire=<span class="string">&quot;byName&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="5-注解编程"><a href="#5-注解编程" class="headerlink" title="5.注解编程"></a>5.注解编程</h3></li><li>配置文件（xml）与注解并存<ul><li>dao层：@Repository</li><li>pojo层：@Component</li><li>service：@Service</li><li>Controller层：@Controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//等价于&lt;bean id=&quot;user&quot; class=&quot;com.liu.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span><span class="comment">//单例，prototype原型模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;lhz&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.liu&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    扫描包下的注解--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-代理模式"><a href="#6-代理模式" class="headerlink" title="6.代理模式"></a>6.代理模式</h3><h3 id="7-面向切面编程-aop"><a href="#7-面向切面编程-aop" class="headerlink" title="7.面向切面编程(aop)"></a>7.面向切面编程(aop)</h3><p>面向切面编程，是在不改变原有代码的基础上，增强代码的功能。Spring-aop有三种实现方式。</p><ul><li>方法一：Spring原生API接口实现<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.log.BeforeLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--方式1:原生Spring的API接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;beforeLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>在一个包下建立以下两个类，分别作为执行前和执行后<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeforeLog</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法，返回结果为：&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法二：使用自定义类<br>定义一个DiyPointCut类，在里面写after和before方法<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式2：自定义类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.diy.DiyPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行后========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========方法执行前========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法三：使用注解<br>需在xml文件中开启注解<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span><span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span><span class="comment">//标记为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===方法执行前===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.liu.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===方法执行后===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Spring和MyBatis整合"><a href="#8-Spring和MyBatis整合" class="headerlink" title="8.Spring和MyBatis整合"></a>8.Spring和MyBatis整合</h3>需使用maven导入相应的jar包<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        Spring操控数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        aop织入包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>Spring-Mybatis使用Spring将Mybatis的配置整合，可以选择在原来的MyBatis-config文件中配置一些简单的Mapper注册和引用别名，在Spring-dao.xml文件中写各种配置，最后在applicationContext.xml文件中注册各个类。与Mybatis不同，Spring-Mybatis只能获得SqlSessionFactoryBean和SqlSessionTemplate。Spring-Mybatis有两种实现方式。</li><li>第一种方式</li></ul><p>首先需要建立实体类，并建立接口和对应的xml文件，然后开始配置xml文件<br>MyBatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引用别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.liu.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/liu/dao/StudentsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSl=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        绑定MyBatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注册接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/liu/dao/StudentsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentsMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.liu.dao.StudentsMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在完成xml配置之后，一般可以建立一个接口的实现类，并在这个类获取sqlSession,在application文件中注册这个类，并将sqlSession通过set注入这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentsMapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        StudentsMapper studentsMapper=sqlSession.getMapper(StudentsMapper.class);</span><br><span class="line">        <span class="keyword">return</span> studentsMapper.getStudents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就可以进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);<span class="comment">//Spring配置文件</span></span><br><span class="line">        StudentsMapper studentsMapper=context.getBean(<span class="string">&quot;studentsMapper1&quot;</span>,StudentsMapper.class);<span class="comment">//接口，获取实现类</span></span><br><span class="line">        List&lt;Students&gt; list=studentsMapper.getStudents();</span><br><span class="line">        <span class="keyword">for</span> (Students students : list) &#123;</span><br><span class="line">            System.out.println(students);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>方法二<br>向接口的实现类注入sqlSeeeionFectory，该实现类需继承SqlSessionDaoSupport</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentsMapperImpl2</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">StudentsMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Students&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        StudentsMapper studentsMapper=getSqlSession().getMapper(StudentsMapper.class);<span class="comment">//此处使用getSqlSession()</span></span><br><span class="line">        <span class="keyword">return</span> studentsMapper.getStudents();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入sqlSessionFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;studentsMapper2&quot;</span> class=<span class="string">&quot;com.liu.dao.StudentsMapperImpl2&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
